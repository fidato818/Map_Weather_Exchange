[{"E:\\Developments\\c-app\\src\\reportWebVitals.js":"1","E:\\Developments\\c-app\\src\\App.js":"2","E:\\Developments\\c-app\\src\\index.js":"3","E:\\Developments\\c-app\\src\\serviceWorkerRegistration.js":"4"},{"size":362,"mtime":1609078789264,"results":"5","hashOfConfig":"6"},{"size":11559,"mtime":1609091172993,"results":"7","hashOfConfig":"6"},{"size":818,"mtime":1609092119225,"results":"8","hashOfConfig":"6"},{"size":5064,"mtime":1609085785398,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"8qci06",{"filePath":"13","messages":"14","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"E:\\Developments\\c-app\\src\\reportWebVitals.js",[],["20","21"],"E:\\Developments\\c-app\\src\\App.js",["22","23","24","25","26","27","28","29"],"import React from \"react\";\n// import logo from \"./logo.svg\";\nimport logoCentigrade from \"./thermometer.png\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport \"./App.css\";\nimport Geocode from \"react-geocode\";\nconst axios = require(\"axios\");\nconst moment = require(\"moment\");\n// const mapStyles = {\n//   width: \"35%\",\n//   height: \"60%\",\n// };\n\nconst containerStyle = {\n  // position: \"absolute\",\n  // width: \"50rem\",\n  // width: \"80%\",\n  height: \"50%\",\n  width: \"514px\",\n  // height: \"480px\",\n  // position: \"relative\",\n};\n// set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\nGeocode.setApiKey(\"AIzaSyBf5r8T5cUQegFU2OcR8qbscn-LqHgmleQ\");\n\n// set response language. Defaults to english.\nGeocode.setLanguage(\"en\");\n\n// set response region. Its optional.\n// A Geocoding request with region=es (Spain) will return the Spanish city.\nGeocode.setRegion(\"es\");\n\n// Enable or disable logs. Its optional.\nGeocode.enableDebug();\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      arr: [],\n      arrRates: [],\n      showingInfoWindow: false, // Hides or shows the InfoWindow\n      activeMarker: {}, // Shows the active marker upon click\n      selectedPlace: {}, // Shows the InfoWindow to the selected place upon a marker\n      lat: null,\n      lng: null,\n      toggleChange: false,\n    };\n  }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n    });\n\n  onClose = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n      });\n    }\n  };\n  componentDidMount() {\n    this.getData();\n    this.getLocation();\n    setTimeout(() => this.getWeatherData(), 2000);\n    setTimeout(() => {\n      this.setState({ toggleChange: true });\n    }, 1000 * 60 * 15);\n\n    setInterval(() => this.getWeatherData(), 1000 * 60 * 30);\n  }\n\n  getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        // console.log(position);\n        this.setState({\n          lat: Number(position.coords.latitude),\n          lng: Number(position.coords.longitude),\n        });\n      });\n    }\n  };\n  getWeatherData = () => {\n    const { lat, lng } = this.state;\n    var arrData = [];\n    return fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&units=metric&appid=3c87e20e286cbedfe37725bece8834ad`\n    )\n      .then((response) => response.json())\n      .then((json) => {\n        arrData.push(json);\n        this.setState({\n          arr: json,\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  async getData() {\n    var arrData = [];\n    try {\n      let res = await axios({\n        url:\n          \"https://cors-anywhere.herokuapp.com/https://v2.api.forex/rates/latest.json?from=USD&key=2cf07889-ccce-44bb-9e83-b276403d3b4c\",\n        method: \"get\",\n        timeout: 3000, // 3 seconds tak data nhi mila to terminate\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      if (res.status === 200) {\n        // test for status you want, etc\n        for (var key in res.data.rates) {\n          arrData.push(\n            Object.assign({ name: key, value: res.data.rates[key] })\n          );\n        }\n      }\n      // Don't forget to return something\n      return this.setState({\n        arrRates: arrData,\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  render() {\n    const { lat, lng, arr, arrRates, toggleChange } = this.state;\n\n    const {\n      daily,\n      timezone,\n\n      current: { temp } = ({} = {}),\n    } = arr || {};\n\n    return (\n      <div>\n        {/* <div> */}\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <div className=\"container-fluid\">\n            <a className=\"navbar-brand\" href=\"/#\">\n              Weather with Location\n            </a>\n            <button\n              className=\"navbar-toggler\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#navbarSupportedContent\"\n              aria-controls=\"navbarSupportedContent\"\n              aria-expanded=\"false\"\n              aria-label=\"Toggle navigation\"\n            >\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div\n              className=\"collapse navbar-collapse\"\n              id=\"navbarSupportedContent\"\n            ></div>\n          </div>\n        </nav>\n        {/* </div> */}\n\n        <div className=\"container\" style={{ marginTop: 10 }}>\n          {toggleChange && (\n            <div class=\"alert alert-danger\" role=\"alert\">\n              Weather Update, Please Refresh!\n            </div>\n          )}\n          <div class=\"row\">\n            <div class=\"col-sm-12 col-md-6 alert alert-primary\">\n              <h1\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                {moment().format(\"MMM Do YYYY, h:mm:ss a\")}\n                <span onClick={() => window.location.reload()}>\n                  <i class=\"fa fa-refresh fa-fw\"></i>\n                </span>\n              </h1>\n\n              <h1 style={{ display: \"flex\", alignItems: \"center\" }}>\n                {temp}\n                <img\n                  src={logoCentigrade}\n                  style={{ height: 35, width: 35, marginLeft: 5 }}\n                  alt=\"logo\"\n                />\n              </h1>\n\n              <h5\n                class=\"card-title\"\n                style={{ display: \"flex\", alignItems: \"center\" }}\n              >\n                {timezone}\n              </h5>\n              <h5\n                class=\"card-text\"\n                style={{ display: \"flex\", justifyContent: \"center\" }}\n              >\n                Next 7 Days Forecast\n              </h5>\n\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Days</th>\n                    <th scope=\"col\">Temp</th>\n                    <th scope=\"col\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {daily &&\n                    daily.slice(1, 8).map((e, i) => {\n                      return (\n                        <tr key={i}>\n                          <td scope=\"row\">{i + 1}</td>\n                          <td scope=\"row\">\n                            {/* {new Date(e.dt * 1000 - timezone_offset * 1000)} */}\n                            {/* {e.dt || \"dddd, MMMM Do YYYY\"} */}\n                            {moment.unix(e.dt).format(\n                              /* e.dt (return epoch time that why i add moment.unix) */\n                              \"MMM Do YYYY\"\n                            )}\n                            {/* {new Date(e.dt)} */}\n                          </td>\n\n                          <td\n                            scope=\"row\"\n                            style={{\n                              display: \"flex\",\n                              alignItems: \"center\",\n                            }}\n                          >\n                            {\n                              <img\n                                src={`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`}\n                                style={{ height: 30, width: 30 }}\n                                alt=\"logo\"\n                              />\n                            }\n                            {/* {`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`} */}\n                            {e.temp.day.toFixed(0)}\n                          </td>\n                          <td scope=\"row\">\n                            {e.weather[0].main} | {e.weather[0].description}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n            </div>\n            <div class=\"col-sm-12 col-md-6 \">\n              <div class=\"row\">\n                <div class=\"col-sm-12 col-md-8\">\n                  {lat === null && lng === null ? (\n                    <div>Loading...</div>\n                  ) : (\n                    <div\n                      style={{\n                        display: \"flex\",\n                        // flexWrap: \"wrap\",\n                        position: \"relative !important\",\n                        height: \"500px !important\",\n                        // width: \"50%\",\n                      }}\n                    >\n                      <Map\n                        google={this.props.google}\n                        zoom={14}\n                        containerStyle={containerStyle}\n                        // style={mapStyles}\n                        initialCenter={{\n                          // lat: -1.2884,\n                          // lng: 36.8233,\n                          lat: lat,\n                          lng: lng,\n                        }}\n                      >\n                        <Marker\n                          position={{ lat: lat, lng: lng }}\n                          onClick={this.onMarkerClick}\n                          name={timezone}\n                        />\n                        <InfoWindow\n                          marker={this.state.activeMarker}\n                          visible={this.state.showingInfoWindow}\n                          onClose={this.onClose}\n                        >\n                          <div>\n                            <h4>{timezone}</h4>\n                          </div>\n                        </InfoWindow>\n                      </Map>\n                    </div>\n                  )}\n                </div>\n                <div\n                  class=\"col-12 alert alert-primary\"\n                  style={{ marginTop: \"23rem\", marginLeft: 5 }}\n                >\n                  <h1>Today's Rate </h1>\n                  <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Currency</th>\n                        <th scope=\"col\">Price</th>\n                        {/* <th scope=\"col\">Change</th> */}\n                      </tr>\n                    </thead>\n\n                    <tbody>\n                      {arrRates &&\n                        arrRates.slice(0, 3).map((e, i) => {\n                          return (\n                            <tr key={i}>\n                              <td scope=\"row\">{i + 1}</td>\n                              <td scope=\"row\">{e.name}</td>\n\n                              <td\n                                scope=\"row\"\n                                style={{\n                                  display: \"flex\",\n                                  alignItems: \"center\",\n                                }}\n                              >\n                                {e.value}\n                              </td>\n                            </tr>\n                          );\n                        })}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBf5r8T5cUQegFU2OcR8qbscn-LqHgmleQ\",\n})(App);\n","E:\\Developments\\c-app\\src\\index.js",[],"E:\\Developments\\c-app\\src\\serviceWorkerRegistration.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":140,"column":28,"nodeType":"36","messageId":"37","endLine":140,"endColumn":30},{"ruleId":"38","severity":1,"message":"39","line":227,"column":31,"nodeType":"40","endLine":227,"endColumn":42},{"ruleId":"38","severity":1,"message":"39","line":228,"column":31,"nodeType":"40","endLine":228,"endColumn":42},{"ruleId":"38","severity":1,"message":"39","line":239,"column":29,"nodeType":"40","endLine":239,"endColumn":40},{"ruleId":"38","severity":1,"message":"39","line":255,"column":31,"nodeType":"40","endLine":255,"endColumn":42},{"ruleId":"38","severity":1,"message":"39","line":329,"column":35,"nodeType":"40","endLine":329,"endColumn":46},{"ruleId":"38","severity":1,"message":"39","line":330,"column":35,"nodeType":"40","endLine":330,"endColumn":46},{"ruleId":"38","severity":1,"message":"39","line":333,"column":33,"nodeType":"40","endLine":333,"endColumn":44},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","no-global-assign","no-unsafe-negation"]